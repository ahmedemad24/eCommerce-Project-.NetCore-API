// <auto-generated />
using AirbnbCRUD.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AirbnbCRUD.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210723140605_updatessgg")]
    partial class updatessgg
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AirbnbCRUD.Model.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatingBookingDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndBookingDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HouseId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("StartBookingDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookingId");

                    b.HasIndex("HouseId");

                    b.HasIndex("PersonId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("AirbnbCRUD.Model.House", b =>
                {
                    b.Property<int>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HouseCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HousePrice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("HouseId");

                    b.HasIndex("PersonId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("AirbnbCRUD.Model.HouseFeedback", b =>
                {
                    b.Property<int>("HouseFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HouseFeedbackBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseFeedbackDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HouseFeedbackStars")
                        .HasColumnType("int");

                    b.Property<int>("HouseId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("HouseFeedbackId");

                    b.HasIndex("HouseId");

                    b.HasIndex("PersonId");

                    b.ToTable("HouseFeedbacks");
                });

            modelBuilder.Entity("AirbnbCRUD.Model.HousePhoto", b =>
                {
                    b.Property<int>("HouseId")
                        .HasColumnType("int");

                    b.Property<string>("HousePhotos")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HouseId", "HousePhotos");

                    b.ToTable("HousePhotos");
                });

            modelBuilder.Entity("AirbnbCRUD.Model.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PersonEmailName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("AirbnbCRUD.Model.PersonFeedback", b =>
                {
                    b.Property<int>("PersonFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("PersonFeedbackBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonFeedbackDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonFeedbackStars")
                        .HasColumnType("int");

                    b.Property<int>("PersonHostId")
                        .HasColumnType("int");

                    b.HasKey("PersonFeedbackId");

                    b.HasIndex("PersonCustomerId");

                    b.HasIndex("PersonHostId");

                    b.ToTable("PersonFeedbacks");
                });

            modelBuilder.Entity("AirbnbCRUD.Model.Booking", b =>
                {
                    b.HasOne("AirbnbCRUD.Model.House", "House")
                        .WithMany("Bookings")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirbnbCRUD.Model.Person", "Person")
                        .WithMany("Bookings")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AirbnbCRUD.Model.House", b =>
                {
                    b.HasOne("AirbnbCRUD.Model.Person", "Person")
                        .WithMany("Houses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AirbnbCRUD.Model.HouseFeedback", b =>
                {
                    b.HasOne("AirbnbCRUD.Model.House", "House")
                        .WithMany("Feedbacks")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirbnbCRUD.Model.Person", "Person")
                        .WithMany("FeedbacksOnHouses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AirbnbCRUD.Model.HousePhoto", b =>
                {
                    b.HasOne("AirbnbCRUD.Model.House", "House")
                        .WithMany("HousePhotos")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");
                });

            modelBuilder.Entity("AirbnbCRUD.Model.PersonFeedback", b =>
                {
                    b.HasOne("AirbnbCRUD.Model.Person", "PersonAsCustomer")
                        .WithMany("FeedbacksAsCustomer")
                        .HasForeignKey("PersonCustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirbnbCRUD.Model.Person", "PersonAsHost")
                        .WithMany("FeedbacksAsHost")
                        .HasForeignKey("PersonHostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonAsCustomer");

                    b.Navigation("PersonAsHost");
                });

            modelBuilder.Entity("AirbnbCRUD.Model.House", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Feedbacks");

                    b.Navigation("HousePhotos");
                });

            modelBuilder.Entity("AirbnbCRUD.Model.Person", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("FeedbacksAsCustomer");

                    b.Navigation("FeedbacksAsHost");

                    b.Navigation("FeedbacksOnHouses");

                    b.Navigation("Houses");
                });
#pragma warning restore 612, 618
        }
    }
}
